services:
  # proxy service
  proxy:
    image: proxy
    build:
      context: ./proxy
      dockerfile: Dockerfile
    container_name: proxy
    ports:
      - "443:443"
    # env_file: ".env"
    networks:
      - internal
    volumes:
      - ./proxy/logs:/var/log/nginx
      - ./frontend:/var/www/html # mount the static frontend directly to ngnix
      # - ./proxy/logs:/var/log/modsecurity

  # API Gateway
  api_gateway:
    image: api_gateway
    container_name: api_gateway
    build:
      context: ./gateway
      dockerfile : Dockerfile
    ports:
    - "8000:8000"
    networks:
      - internal
    depends_on:
      - test_service
    #   - auth_service
    #   - game_service


  # Backend services
  # auth_service:
  #   container_name: auth_service
  #   build: ./backend/auth/auth
  #   #deploy:
  #   #  replicas: 3
  #   #  update_config:
  #   #   parallelism: 1
  #   #   delay: 10s
  #   command: bash -c "python manage.py makemigrations && python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
  #   env_file:
  #     - .env
  #   #ports:
  #   #  - "8001:8000" #change both to 8002:8002
  #   networks:
  #     - internal
  #   depends_on:
  #     auth_db:
  #       condition: service_healthy
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD-SHELL", "curl -f http://localhost:8000 || exit 1"]
  #     interval: 10s
  #     retries: 5

  # Postgres database
  # auth_db:
  #   container_name: container_postgres
  #   image: postgres
  #   env_file:
  #     - .env
  #   environment:
  #     - POSTGRES_USER=${POSTGRES_USER}
  #     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
  #     - POSTGRES_DB=${POSTGRES_AUTH_DB}
  #   restart: unless-stopped
  #   ports:
  #     - "5432:5432"
  #  # networks:
  #   #  - internal
  #   healthcheck:
  #     test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}" , "-d", "${POSTGRES_AUTH_DB}"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5


  # Hashicorp Vault
  # vault:
  #   image: hashicorp/vault
  #   container_name: vault
  #   ports:
  #     - "8200:8200"
  #   environment:
  #     VAULT_DEV_ROOT_TOKEN_ID: "root" # Development mode token
  #     VAULT_DEV_LISTEN_ADDRESS: "0.0.0.0:8200" # Listen on all addresses
  #   cap_add:
  #     - IPC_LOCK # Prevent sensitive data from being swapped
  #   volumes:
  #     - ./vault/data:/vault/data

  test_service:
    image: test_service
    container_name: test_service
    build:
      context: ./backend/test_service
      dockerfile: Dockerfile
    command: bash -c "python manage.py makemigrations && python manage.py migrate && python manage.py runserver 0.0.0.0:8001"
    env_file:
      - test.env # custom test.env
    restart: unless-stopped
    ports:
     - "8001:8001"
    depends_on:
      test_postgres:
        condition: service_healthy
    networks:
      - internal

  test_postgres:
    image: postgres:15
    container_name: test_postgres
    env_file: "test.env" #use a CUSTOM test.env
    restart: on-failure
    ports:
      - "5432:5432"
    volumes:
      - postgres:/var/lib/postgresql/data
    healthcheck:
      # test: ["CMD-SHELL", "pg_isready -U postgres -d postgres_db"]
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - internal

networks:
  internal:
    driver: bridge

#local volume
volumes:
  postgres:
    driver : local
    driver_opts:
      type: none
      device: /home/${USER}/data/postgres/
      o: bind

#named volume
# volumes:
#   postgres:

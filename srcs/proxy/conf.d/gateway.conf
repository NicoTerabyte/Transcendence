upstream auth-service {
	server auth-service:8001;
}

upstream tournament-service
{
	server tournament-service:8003;
}

upstream history-service {
		server history-service:8002;
}

server {
    listen 443 ssl;
    server_name localhost;

	ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
	ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;
	ssl_protocols TLSv1.2 TLSv1.3;
	ssl_prefer_server_ciphers on;
	ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
	ssl_session_cache shared:SSL:10m;
	ssl_session_timeout 1h;

	add_header X-Frame-Options "SAMEORIGIN" always;
	add_header X-Content-Type-Options "nosniff" always;
	add_header X-XSS-Protection "1; mode=block" always;
	add_header Referrer-Policy "strict-origin-when-cross-origin" always;
	add_header Content-Security-Policy "default-src 'self';
		script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net;
		style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net https://fonts.googleapis.com;
		font-src 'self' https://fonts.gstatic.com https://cdn.jsdelivr.net;
    	img-src 'self' data: http://localhost/media/ https://localhost/media/;" always;

	location / {
		# rate limiting
		limit_req zone=api_limit burst=25;
		# root of the static frontend files
		root /var/www/html;
		index index.html;
		try_files $uri $uri/ /index.html;

		# # Use the custom log format
		# access_log /var/log/nginx/access.log custom;
	}

	location /media/ {
		# Direct file serving instead of proxying to Django
		alias /app/media/;
		autoindex off;

		# Add proper MIME type detection
		include mime.types;
		# types {
		# 	image/jpeg jpg jpeg;
		# 	image/png png;
		# 	image/gif gif;
		# 	image/webp webp;
		# }
		location ~* \.(?:jpg|jpeg|gif|png|webp)$ {
			expires 30d;
			add_header Cache-Control "public, no-transform";
			try_files $uri =404;
		}

		if ($request_filename ~* \.(php|pl|py|jsp|asp|sh|cgi)$) {
			return 403;
		}

		# Cache settings
		expires 7d;
		add_header Cache-Control "public, max-age=604800, immutable";

		# Security headers
		add_header X-Content-Type-Options "nosniff";
		add_header Access-Control-Allow-Origin "https://localhost";

		# Add these lines:
		error_log /var/log/nginx/media-error.log debug;
		add_header X-Debug-Path $request_filename;
	}

    # API Gateway
    location /api/ {
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto $scheme;
        # JWT validation for all API routes
        auth_request /_validate_jwt;
        auth_request_set $user_id $upstream_http_x_user_id;
        proxy_set_header X-User-ID $user_id;

        # Route definitions
		location /api/auth/ {
			auth_request off;
			proxy_pass http://auth-service;
		}

        location /api/oauth/ {
			auth_request off;
            proxy_pass http://auth-service;
        }

        location /api/user/ {
			auth_request off;
            proxy_pass http://auth-service;
        }

        location /api/tournament/ {
            proxy_pass http://tournament-service;
        }

        location /api/history/ {
            proxy_pass http://history-service;
        }
    }

	location /adminer/ {
		proxy_pass http://adminer:8080/;
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto $scheme;
	}

	location /grafana/ {
		proxy_pass http://grafana:3000/;
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto $scheme;

		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection "upgrade";
	}

	location /prometheus/ {
		proxy_pass http://prometheus:9090/;
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto $scheme;
	}

	location /node-exporter/ {
		proxy_pass http://node-exporter:9100/;
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto $scheme;
	}

	location /alertmanager/ {
		proxy_pass http://alertmanager:9093/;
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto $scheme;
	}

    # JWT validation endpoint
    location = /_validate_jwt {
        internal;
        proxy_pass http://auth-service/api/auth/validate/;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
  	    proxy_set_header X-Original-URI $request_uri;
    }
}
